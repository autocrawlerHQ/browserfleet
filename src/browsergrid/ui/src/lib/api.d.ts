/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/webhooks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Webhooks
         * @description List all webhooks.
         *
         *     Returns a paginated list of webhooks, optionally filtered by session and status.
         */
        get: operations["list_webhooks_api_v1_webhooks__get"];
        put?: never;
        /**
         * Create Webhook
         * @description Create a new webhook for a session.
         *
         *     This endpoint registers a new webhook that will be triggered when
         *     matching CDP events occur in the specified session.
         */
        post: operations["create_webhook_api_v1_webhooks__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhooks/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Webhook Templates
         * @description List all available webhook templates.
         *
         *     Returns predefined webhook configurations for common use cases
         *     such as captcha solving, screenshot capture, etc.
         */
        get: operations["list_webhook_templates_api_v1_webhooks_templates_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhooks/templates/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Webhook Template
         * @description Get a specific webhook template.
         *
         *     Returns the configuration for a specific predefined webhook template.
         */
        get: operations["get_webhook_template_api_v1_webhooks_templates__template_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhooks/{webhook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Webhook
         * @description Get details for a specific webhook.
         *
         *     Returns comprehensive information about a webhook configuration.
         */
        get: operations["get_webhook_api_v1_webhooks__webhook_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Webhook
         * @description Delete a webhook.
         *
         *     Removes the webhook configuration. The webhook will no longer be triggered.
         */
        delete: operations["delete_webhook_api_v1_webhooks__webhook_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Webhook
         * @description Update a webhook's configuration.
         *
         *     Allows modifying aspects of a webhook such as the URL, headers, or event pattern.
         */
        patch: operations["update_webhook_api_v1_webhooks__webhook_id__patch"];
        trace?: never;
    };
    "/api/v1/webhooks/executions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Webhook Executions
         * @description List webhook executions.
         *
         *     Returns a paginated list of webhook execution logs, optionally filtered
         *     by webhook ID or session ID.
         */
        get: operations["list_webhook_executions_api_v1_webhooks_executions__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhooks/executions/{execution_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Webhook Execution
         * @description Get details for a specific webhook execution.
         *
         *     Returns comprehensive information about a webhook execution including
         *     request and response details.
         */
        get: operations["get_webhook_execution_api_v1_webhooks_executions__execution_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhooks/{webhook_id}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Webhook
         * @description Test a webhook.
         *
         *     Sends a test request to the webhook URL with either a sample event
         *     or a generic test payload.
         */
        post: operations["test_webhook_api_v1_webhooks__webhook_id__test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Sessions
         * @description List all browser sessions.
         *
         *     Returns a paginated list of browser sessions, optionally filtered by status.
         */
        get: operations["list_sessions_api_v1_sessions__get"];
        put?: never;
        /**
         * Create Session
         * @description Create a new browser session.
         *
         *     This endpoint launches a new remote Chrome instance with the specified configuration.
         *     The session is provisioned asynchronously, and the response includes connection details
         *     once the browser is ready.
         *
         *     If work_pool_id is specified, the session will be assigned to that work pool.
         *     Otherwise, a suitable work pool will be chosen automatically if available.
         */
        post: operations["create_session_api_v1_sessions__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session
         * @description Get details for a specific browser session.
         *
         *     Returns comprehensive information about a session, optionally including
         *     related metrics and events.
         */
        get: operations["get_session_api_v1_sessions__session_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Session
         * @description Delete a browser session.
         *
         *     Terminates the remote browser instance and removes all associated resources.
         *     The 'force' parameter can be used to force termination if graceful shutdown fails.
         */
        delete: operations["delete_session_api_v1_sessions__session_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Session
         * @description Refresh a browser session.
         *
         *     Extends the expiration time of the session to prevent automatic termination.
         */
        post: operations["refresh_session_api_v1_sessions__session_id__refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Metrics
         * @description List session metrics with optional filtering.
         *
         *     Returns a list of metrics, optionally filtered by session ID and time range.
         */
        get: operations["list_metrics_api_v1_metrics__get"];
        put?: never;
        /**
         * Create Metrics
         * @description Record metrics for a session.
         *
         *     This endpoint allows recording resource usage metrics for a browser session,
         *     such as CPU, memory and network usage.
         */
        post: operations["create_metrics_api_v1_metrics__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/{metrics_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metrics
         * @description Get details of specific metrics entry.
         */
        get: operations["get_metrics_api_v1_metrics__metrics_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Metrics
         * @description Delete a specific metrics entry.
         */
        delete: operations["delete_metrics_api_v1_metrics__metrics_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/session/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session Metrics
         * @description Get all metrics for a specific session, with optional time-based aggregation.
         *
         *     If interval is specified, metrics will be aggregated over the specified time interval.
         */
        get: operations["get_session_metrics_api_v1_metrics_session__session_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics/aggregate/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Aggregate Metrics
         * @description Get aggregated metrics for multiple sessions.
         *
         *     Compare metrics across different sessions.
         */
        get: operations["get_aggregate_metrics_api_v1_metrics_aggregate_sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Events
         * @description List session events with optional filtering.
         *
         *     Returns a list of events, optionally filtered by session ID, event type,
         *     and time range.
         */
        get: operations["list_events_api_v1_events__get"];
        put?: never;
        /**
         * Create Event
         * @description Record a new session event.
         *
         *     This endpoint allows recording various events that occur during a browser session lifecycle,
         *     using standardized event types defined in the SessionEventType enum.
         *
         *     The session status will be automatically updated when appropriate based on the event type.
         */
        post: operations["create_event_api_v1_events__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event
         * @description Get details of a specific event.
         */
        get: operations["get_event_api_v1_events__event_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Event
         * @description Delete a specific event.
         */
        delete: operations["delete_event_api_v1_events__event_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/session/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session Events
         * @description Get all events for a specific session.
         */
        get: operations["get_session_events_api_v1_events_session__session_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workerpools/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Work Pools
         * @description List work pools with optional filters
         */
        get: operations["list_work_pools_api_v1_workerpools_pools_get"];
        put?: never;
        /**
         * Create Work Pool
         * @description Create a new work pool
         */
        post: operations["create_work_pool_api_v1_workerpools_pools_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workerpools/pools/{pool_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Work Pool
         * @description Get a specific work pool with its workers
         */
        get: operations["get_work_pool_api_v1_workerpools_pools__pool_id__get"];
        /**
         * Update Work Pool
         * @description Update a work pool
         */
        put: operations["update_work_pool_api_v1_workerpools_pools__pool_id__put"];
        post?: never;
        /**
         * Delete Work Pool
         * @description Delete a work pool
         */
        delete: operations["delete_work_pool_api_v1_workerpools_pools__pool_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workerpools/workers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Workers
         * @description List workers with optional filters
         */
        get: operations["list_workers_api_v1_workerpools_workers_get"];
        put?: never;
        /**
         * Create Worker
         * @description Create a new worker
         */
        post: operations["create_worker_api_v1_workerpools_workers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workerpools/workers/{worker_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Worker
         * @description Get a specific worker
         */
        get: operations["get_worker_api_v1_workerpools_workers__worker_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Worker
         * @description Delete a worker
         */
        delete: operations["delete_worker_api_v1_workerpools_workers__worker_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workerpools/workers/{worker_id}/heartbeat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Worker Heartbeat
         * @description Update worker heartbeat and status
         */
        put: operations["update_worker_heartbeat_api_v1_workerpools_workers__worker_id__heartbeat_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workerpools/workers/{worker_id}/claim-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim Pending Session
         * @description Claim a pending session for a worker
         */
        post: operations["claim_pending_session_api_v1_workerpools_workers__worker_id__claim_session_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workerpools/metrics/workers/{worker_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Worker Metrics
         * @description Get system resource metrics for a specific worker over time.
         *
         *     Returns CPU, memory, and disk usage metrics for the worker.
         *     If interval is specified, metrics will be aggregated over the interval.
         */
        get: operations["get_worker_metrics_api_v1_workerpools_metrics_workers__worker_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workerpools/metrics/workpool/{work_pool_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workpool Metrics
         * @description Get system resource metrics aggregated for an entire work pool.
         *
         *     Returns CPU, memory, and network usage metrics for all workers in the pool.
         */
        get: operations["get_workpool_metrics_api_v1_workerpools_metrics_workpool__work_pool_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workerpools/metrics/system/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Metrics Overview
         * @description Get system-wide metrics overview across all work pools.
         *
         *     Returns aggregated statistics on resource usage, session counts, and worker status.
         */
        get: operations["get_system_metrics_overview_api_v1_workerpools_metrics_system_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Browser
         * @description Browser types
         * @enum {string}
         */
        Browser: "chrome" | "firefox" | "edge" | "safari";
        /**
         * BrowserVersion
         * @description Browser versions
         * @enum {string}
         */
        BrowserVersion: "latest" | "stable" | "canary" | "dev";
        /**
         * CDPEventPattern
         * @description Pattern to match CDP events
         */
        CDPEventPattern: {
            /** Method */
            method: string;
            /** Param Filters */
            param_filters?: Record<string, never> | null;
        };
        /**
         * CDPWebhook
         * @description Full webhook model
         */
        CDPWebhook: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            event_pattern: components["schemas"]["CDPEventPattern"];
            timing: components["schemas"]["WebhookTiming"];
            /**
             * Webhook Url
             * Format: uri
             */
            webhook_url: string;
            /** Webhook Headers */
            webhook_headers?: {
                [key: string]: string;
            };
            /**
             * Timeout Seconds
             * @default 10
             */
            timeout_seconds: number;
            /**
             * Max Retries
             * @default 3
             */
            max_retries: number;
            /**
             * Active
             * @default true
             */
            active: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
        };
        /**
         * CDPWebhookCreate
         * @description Schema for creating a new webhook
         */
        CDPWebhookCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            event_pattern: components["schemas"]["CDPEventPattern"];
            timing: components["schemas"]["WebhookTiming"];
            /**
             * Webhook Url
             * Format: uri
             */
            webhook_url: string;
            /** Webhook Headers */
            webhook_headers?: {
                [key: string]: string;
            };
            /**
             * Timeout Seconds
             * @default 10
             */
            timeout_seconds: number;
            /**
             * Max Retries
             * @default 3
             */
            max_retries: number;
            /**
             * Active
             * @default true
             */
            active: boolean;
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
            /** Id */
            id?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * OperatingSystem
         * @description Operating systems
         * @enum {string}
         */
        OperatingSystem: "windows" | "macos" | "linux";
        /**
         * ProviderType
         * @description Type of provider for worker
         * @enum {string}
         */
        ProviderType: "docker" | "azure_container_instance";
        /**
         * ProxyConfig
         * @description Configuration for HTTP proxy
         */
        ProxyConfig: {
            /** Proxy Url */
            proxy_url: string;
            /** Proxy Username */
            proxy_username?: string | null;
            /** Proxy Password */
            proxy_password?: string | null;
        };
        /**
         * ResourceLimits
         * @description Resource limits for browser sessions
         */
        ResourceLimits: {
            /** Cpu */
            cpu?: number | null;
            /** Memory */
            memory?: string | null;
            /**
             * Timeout Minutes
             * @default 30
             */
            timeout_minutes: number | null;
        };
        /**
         * ScreenConfig
         * @description Screen configuration
         */
        ScreenConfig: {
            /**
             * Width
             * @default 1280
             */
            width: number;
            /**
             * Height
             * @default 720
             */
            height: number;
            /**
             * Dpi
             * @default 96
             */
            dpi: number;
            /**
             * Scale
             * @default 1
             */
            scale: number;
        };
        /**
         * Session
         * @description Full session model
         */
        Session: {
            /** @default chrome */
            browser: components["schemas"]["Browser"];
            /** @default latest */
            version: components["schemas"]["BrowserVersion"];
            /**
             * Headless
             * @default false
             */
            headless: boolean;
            /** @default linux */
            operating_system: components["schemas"]["OperatingSystem"];
            screen?: components["schemas"]["ScreenConfig"];
            proxy?: components["schemas"]["ProxyConfig"] | null;
            resource_limits?: components["schemas"]["ResourceLimits"];
            /** Environment */
            environment?: {
                [key: string]: string;
            };
            /**
             * Provider
             * @default local
             */
            provider: string;
            /**
             * Webhooks Enabled
             * @default true
             */
            webhooks_enabled: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            status: components["schemas"]["SessionStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Expires At */
            expires_at?: string | null;
            /** Container Id */
            container_id?: string | null;
            /** Work Pool Id */
            work_pool_id?: string | null;
            /** Worker Id */
            worker_id?: string | null;
        };
        /**
         * SessionCreate
         * @description Schema for creating a new session
         * @example {
         *       "browser": "chrome",
         *       "headless": false,
         *       "operating_system": "linux",
         *       "proxy": {
         *         "proxy_url": "http://127.0.0.1:9090"
         *       },
         *       "resource_limits": {
         *         "cpu": 2,
         *         "memory": "4G",
         *         "timeout_minutes": 60
         *       },
         *       "screen": {
         *         "dpi": 96,
         *         "height": 1024,
         *         "scale": 1,
         *         "width": 1280
         *       },
         *       "version": "latest",
         *       "webhooks_enabled": true,
         *       "work_pool_id": "docker-pool-1"
         *     }
         */
        SessionCreate: {
            /** @default chrome */
            browser: components["schemas"]["Browser"];
            /** @default latest */
            version: components["schemas"]["BrowserVersion"];
            /**
             * Headless
             * @default false
             */
            headless: boolean;
            /** @default linux */
            operating_system: components["schemas"]["OperatingSystem"];
            screen?: components["schemas"]["ScreenConfig"];
            proxy?: components["schemas"]["ProxyConfig"] | null;
            resource_limits?: components["schemas"]["ResourceLimits"];
            /** Environment */
            environment?: {
                [key: string]: string;
            };
            /**
             * Provider
             * @default local
             */
            provider: string;
            /**
             * Webhooks Enabled
             * @default true
             */
            webhooks_enabled: boolean;
            /** Id */
            id?: string | null;
            /** Work Pool Id */
            work_pool_id?: string | null;
        };
        /**
         * SessionDetails
         * @description Session with connection details
         */
        SessionDetails: {
            /** @default chrome */
            browser: components["schemas"]["Browser"];
            /** @default latest */
            version: components["schemas"]["BrowserVersion"];
            /**
             * Headless
             * @default false
             */
            headless: boolean;
            /** @default linux */
            operating_system: components["schemas"]["OperatingSystem"];
            screen?: components["schemas"]["ScreenConfig"];
            proxy?: components["schemas"]["ProxyConfig"] | null;
            resource_limits?: components["schemas"]["ResourceLimits"];
            /** Environment */
            environment?: {
                [key: string]: string;
            };
            /**
             * Provider
             * @default local
             */
            provider: string;
            /**
             * Webhooks Enabled
             * @default true
             */
            webhooks_enabled: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            status: components["schemas"]["SessionStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Expires At */
            expires_at?: string | null;
            /** Container Id */
            container_id?: string | null;
            /** Work Pool Id */
            work_pool_id?: string | null;
            /** Worker Id */
            worker_id?: string | null;
            /** Ws Endpoint */
            ws_endpoint?: string | null;
            /** Live Url */
            live_url?: string | null;
        };
        /**
         * SessionEvent
         * @description Full session event model
         */
        SessionEvent: {
            event: components["schemas"]["SessionEventType"];
            /** Data */
            data?: Record<string, never> | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /**
         * SessionEventCreate
         * @description Schema for creating session events
         */
        SessionEventCreate: {
            event: components["schemas"]["SessionEventType"];
            /** Data */
            data?: Record<string, never> | null;
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
        };
        /**
         * SessionEventType
         * @description Event types for browser session lifecycle
         * @enum {string}
         */
        SessionEventType: "session_created" | "session_assigned" | "session_starting" | "browser_started" | "session_idle" | "session_active" | "session_completed" | "session_crashed" | "session_timed_out" | "session_terminated";
        /**
         * SessionMetrics
         * @description Full session metrics model
         */
        SessionMetrics: {
            /** Cpu Percent */
            cpu_percent?: number | null;
            /** Memory Mb */
            memory_mb?: number | null;
            /** Network Rx Bytes */
            network_rx_bytes?: number | null;
            /** Network Tx Bytes */
            network_tx_bytes?: number | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /**
         * SessionMetricsCreate
         * @description Schema for creating session metrics
         */
        SessionMetricsCreate: {
            /** Cpu Percent */
            cpu_percent?: number | null;
            /** Memory Mb */
            memory_mb?: number | null;
            /** Network Rx Bytes */
            network_rx_bytes?: number | null;
            /** Network Tx Bytes */
            network_tx_bytes?: number | null;
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
        };
        /**
         * SessionStatus
         * @description Status for a browser session
         * @enum {string}
         */
        SessionStatus: "pending" | "starting" | "running" | "completed" | "failed" | "expired" | "crashed" | "timed_out" | "terminated";
        /**
         * SessionWithRelations
         * @description Session with its related data
         */
        SessionWithRelations: {
            /** @default chrome */
            browser: components["schemas"]["Browser"];
            /** @default latest */
            version: components["schemas"]["BrowserVersion"];
            /**
             * Headless
             * @default false
             */
            headless: boolean;
            /** @default linux */
            operating_system: components["schemas"]["OperatingSystem"];
            screen?: components["schemas"]["ScreenConfig"];
            proxy?: components["schemas"]["ProxyConfig"] | null;
            resource_limits?: components["schemas"]["ResourceLimits"];
            /** Environment */
            environment?: {
                [key: string]: string;
            };
            /**
             * Provider
             * @default local
             */
            provider: string;
            /**
             * Webhooks Enabled
             * @default true
             */
            webhooks_enabled: boolean;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            status: components["schemas"]["SessionStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Expires At */
            expires_at?: string | null;
            /** Container Id */
            container_id?: string | null;
            /** Work Pool Id */
            work_pool_id?: string | null;
            /** Worker Id */
            worker_id?: string | null;
            /** Ws Endpoint */
            ws_endpoint?: string | null;
            /** Live Url */
            live_url?: string | null;
            /**
             * Events
             * @default []
             */
            events: components["schemas"]["SessionEvent"][];
            /**
             * Metrics
             * @default []
             */
            metrics: components["schemas"]["SessionMetrics"][];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * WebhookExecution
         * @description Full webhook execution model
         */
        WebhookExecution: {
            /** Cdp Event */
            cdp_event: string;
            /** Event Data */
            event_data: Record<string, never>;
            timing: components["schemas"]["WebhookTiming"];
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Webhook Id
             * Format: uuid
             */
            webhook_id: string;
            /**
             * Session Id
             * Format: uuid
             */
            session_id: string;
            status: components["schemas"]["WebhookStatus"];
            /**
             * Started At
             * Format: date-time
             */
            started_at: string;
            /** Completed At */
            completed_at?: string | null;
            /** Response Status Code */
            response_status_code?: number | null;
            /** Response Body */
            response_body?: string | null;
            /** Error Message */
            error_message?: string | null;
            /**
             * Retry Count
             * @default 0
             */
            retry_count: number;
            /** Execution Time Ms */
            execution_time_ms?: number | null;
        };
        /**
         * WebhookStatus
         * @description Status of a webhook execution
         *
         * @enum {string}
         */
        WebhookStatus: "pending" | "success" | "failed" | "timeout";
        /**
         * WebhookTemplate
         * @description Template for common webhook use cases
         */
        WebhookTemplate: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            event_pattern: components["schemas"]["CDPEventPattern"];
            timing: components["schemas"]["WebhookTiming"];
            /**
             * Default Url
             * Format: uri
             */
            default_url: string;
            /** Example Config */
            example_config: Record<string, never>;
        };
        /**
         * WebhookTiming
         * @description When to trigger the webhook, before or after the event is sent to connected clients
         *
         * @enum {string}
         */
        WebhookTiming: "before_event" | "after_event";
        /**
         * WorkPool
         * @description Full WorkPool model
         */
        WorkPool: {
            /** Name */
            name: string;
            /** @default docker */
            provider_type: components["schemas"]["ProviderType"];
            /** @default active */
            status: components["schemas"]["WorkPoolStatus"];
            default_browser?: components["schemas"]["Browser"] | null;
            default_browser_version?: components["schemas"]["BrowserVersion"] | null;
            /** Default Headless */
            default_headless?: boolean | null;
            default_operating_system?: components["schemas"]["OperatingSystem"] | null;
            default_screen?: components["schemas"]["ScreenConfig"] | null;
            default_proxy?: components["schemas"]["ProxyConfig"] | null;
            default_resource_limits?: components["schemas"]["ResourceLimits"] | null;
            /** Default Environment */
            default_environment?: {
                [key: string]: string;
            } | null;
            /**
             * Min Workers
             * @default 0
             */
            min_workers: number;
            /**
             * Max Workers
             * @default 10
             */
            max_workers: number;
            /**
             * Max Sessions Per Worker
             * @default 5
             */
            max_sessions_per_worker: number;
            /** Provider Config */
            provider_config?: Record<string, never>;
            /** Description */
            description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * WorkPoolCreate
         * @description Schema for creating a new WorkPool
         * @example {
         *       "default_browser": "chrome",
         *       "default_browser_version": "latest",
         *       "default_headless": false,
         *       "default_operating_system": "linux",
         *       "default_resource_limits": {
         *         "cpu": 2,
         *         "memory": "4G",
         *         "timeout_minutes": 60
         *       },
         *       "description": "Docker pool for Chrome sessions",
         *       "max_workers": 5,
         *       "min_workers": 1,
         *       "name": "docker-pool-1",
         *       "provider_type": "docker"
         *     }
         */
        WorkPoolCreate: {
            /** Name */
            name: string;
            /** @default docker */
            provider_type: components["schemas"]["ProviderType"];
            /** @default active */
            status: components["schemas"]["WorkPoolStatus"];
            default_browser?: components["schemas"]["Browser"] | null;
            default_browser_version?: components["schemas"]["BrowserVersion"] | null;
            /** Default Headless */
            default_headless?: boolean | null;
            default_operating_system?: components["schemas"]["OperatingSystem"] | null;
            default_screen?: components["schemas"]["ScreenConfig"] | null;
            default_proxy?: components["schemas"]["ProxyConfig"] | null;
            default_resource_limits?: components["schemas"]["ResourceLimits"] | null;
            /** Default Environment */
            default_environment?: {
                [key: string]: string;
            } | null;
            /**
             * Min Workers
             * @default 0
             */
            min_workers: number;
            /**
             * Max Workers
             * @default 10
             */
            max_workers: number;
            /**
             * Max Sessions Per Worker
             * @default 5
             */
            max_sessions_per_worker: number;
            /** Provider Config */
            provider_config?: Record<string, never>;
            /** Description */
            description?: string | null;
            /** Id */
            id?: string | null;
        };
        /**
         * WorkPoolStatus
         * @description Status for a work pool
         * @enum {string}
         */
        WorkPoolStatus: "active" | "paused" | "draining" | "inactive";
        /**
         * WorkPoolWithRelations
         * @description WorkPool with related workers
         */
        WorkPoolWithRelations: {
            /** Name */
            name: string;
            /** @default docker */
            provider_type: components["schemas"]["ProviderType"];
            /** @default active */
            status: components["schemas"]["WorkPoolStatus"];
            default_browser?: components["schemas"]["Browser"] | null;
            default_browser_version?: components["schemas"]["BrowserVersion"] | null;
            /** Default Headless */
            default_headless?: boolean | null;
            default_operating_system?: components["schemas"]["OperatingSystem"] | null;
            default_screen?: components["schemas"]["ScreenConfig"] | null;
            default_proxy?: components["schemas"]["ProxyConfig"] | null;
            default_resource_limits?: components["schemas"]["ResourceLimits"] | null;
            /** Default Environment */
            default_environment?: {
                [key: string]: string;
            } | null;
            /**
             * Min Workers
             * @default 0
             */
            min_workers: number;
            /**
             * Max Workers
             * @default 10
             */
            max_workers: number;
            /**
             * Max Sessions Per Worker
             * @default 5
             */
            max_sessions_per_worker: number;
            /** Provider Config */
            provider_config?: Record<string, never>;
            /** Description */
            description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Workers
             * @default []
             */
            workers: components["schemas"]["Worker"][];
        };
        /**
         * Worker
         * @description Full Worker model
         */
        Worker: {
            /** Name */
            name: string;
            /**
             * Work Pool Id
             * Format: uuid
             */
            work_pool_id: string;
            /** @default offline */
            status: components["schemas"]["WorkerStatus"];
            /**
             * Capacity
             * @default 5
             */
            capacity: number;
            provider_type: components["schemas"]["ProviderType"];
            /** Provider Details */
            provider_details?: Record<string, never>;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Current Load */
            current_load: number;
            /** Cpu Percent */
            cpu_percent?: number | null;
            /** Memory Usage Mb */
            memory_usage_mb?: number | null;
            /** Disk Usage Mb */
            disk_usage_mb?: number | null;
            /** Ip Address */
            ip_address?: string | null;
            /** Last Heartbeat */
            last_heartbeat?: string | null;
            /** Provider Id */
            provider_id?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * WorkerCreate
         * @description Schema for creating a new Worker
         * @example {
         *       "capacity": 5,
         *       "name": "worker-1",
         *       "provider_type": "docker",
         *       "work_pool_id": "550e8400-e29b-41d4-a716-446655440000"
         *     }
         */
        WorkerCreate: {
            /** Name */
            name: string;
            /**
             * Work Pool Id
             * Format: uuid
             */
            work_pool_id: string;
            /** @default offline */
            status: components["schemas"]["WorkerStatus"];
            /**
             * Capacity
             * @default 5
             */
            capacity: number;
            provider_type: components["schemas"]["ProviderType"];
            /** Provider Details */
            provider_details?: Record<string, never>;
            /** Id */
            id?: string | null;
            /** Api Key */
            api_key?: string | null;
        };
        /**
         * WorkerHeartbeat
         * @description Schema for worker heartbeat updates
         */
        WorkerHeartbeat: {
            status: components["schemas"]["WorkerStatus"];
            /** Current Load */
            current_load: number;
            /** Cpu Percent */
            cpu_percent?: number | null;
            /** Memory Usage Mb */
            memory_usage_mb?: number | null;
            /** Disk Usage Mb */
            disk_usage_mb?: number | null;
            /** Ip Address */
            ip_address?: string | null;
        };
        /**
         * WorkerStatus
         * @description Status for a worker
         * @enum {string}
         */
        WorkerStatus: "offline" | "online" | "busy" | "draining" | "failed";
        /**
         * WorkerWithSessions
         * @description Worker with session information
         */
        WorkerWithSessions: {
            /** Name */
            name: string;
            /**
             * Work Pool Id
             * Format: uuid
             */
            work_pool_id: string;
            /** @default offline */
            status: components["schemas"]["WorkerStatus"];
            /**
             * Capacity
             * @default 5
             */
            capacity: number;
            provider_type: components["schemas"]["ProviderType"];
            /** Provider Details */
            provider_details?: Record<string, never>;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Current Load */
            current_load: number;
            /** Cpu Percent */
            cpu_percent?: number | null;
            /** Memory Usage Mb */
            memory_usage_mb?: number | null;
            /** Disk Usage Mb */
            disk_usage_mb?: number | null;
            /** Ip Address */
            ip_address?: string | null;
            /** Last Heartbeat */
            last_heartbeat?: string | null;
            /** Provider Id */
            provider_id?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Session Count */
            session_count: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_webhooks_api_v1_webhooks__get: {
        parameters: {
            query?: {
                session_id?: string | null;
                active?: boolean | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CDPWebhook"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_webhook_api_v1_webhooks__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CDPWebhookCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CDPWebhook"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_webhook_templates_api_v1_webhooks_templates_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["WebhookTemplate"];
                    };
                };
            };
        };
    };
    get_webhook_template_api_v1_webhooks_templates__template_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookTemplate"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_webhook_api_v1_webhooks__webhook_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CDPWebhook"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_webhook_api_v1_webhooks__webhook_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_webhook_api_v1_webhooks__webhook_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CDPWebhook"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_webhook_executions_api_v1_webhooks_executions__get: {
        parameters: {
            query?: {
                webhook_id?: string | null;
                session_id?: string | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookExecution"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_webhook_execution_api_v1_webhooks_executions__execution_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                execution_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookExecution"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_webhook_api_v1_webhooks__webhook_id__test_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never> | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_sessions_api_v1_sessions__get: {
        parameters: {
            query?: {
                status?: components["schemas"]["SessionStatus"] | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_session_api_v1_sessions__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionDetails"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_api_v1_sessions__session_id__get: {
        parameters: {
            query?: {
                include_metrics?: boolean;
                include_events?: boolean;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionWithRelations"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_session_api_v1_sessions__session_id__delete: {
        parameters: {
            query?: {
                force?: boolean;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_session_api_v1_sessions__session_id__refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionDetails"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_metrics_api_v1_metrics__get: {
        parameters: {
            query?: {
                session_id?: string | null;
                start_time?: string | null;
                end_time?: string | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionMetrics"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_metrics_api_v1_metrics__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionMetricsCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionMetrics"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_metrics_api_v1_metrics__metrics_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                metrics_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionMetrics"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_metrics_api_v1_metrics__metrics_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                metrics_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_metrics_api_v1_metrics_session__session_id__get: {
        parameters: {
            query?: {
                start_time?: string | null;
                end_time?: string | null;
                interval?: string | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionMetrics"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_aggregate_metrics_api_v1_metrics_aggregate_sessions_get: {
        parameters: {
            query: {
                session_ids: string[];
                /** @description Type of metric to aggregate (cpu_percent, memory_mb, network_rx_bytes, network_tx_bytes) */
                metric_type: string;
                start_time?: string | null;
                end_time?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_events_api_v1_events__get: {
        parameters: {
            query?: {
                session_id?: string | null;
                event_type?: components["schemas"]["SessionEventType"] | null;
                start_time?: string | null;
                end_time?: string | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionEvent"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_event_api_v1_events__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionEventCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_event_api_v1_events__event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionEvent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_event_api_v1_events__event_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_events_api_v1_events_session__session_id__get: {
        parameters: {
            query?: {
                event_type?: string | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionEvent"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_work_pools_api_v1_workerpools_pools_get: {
        parameters: {
            query?: {
                status?: components["schemas"]["WorkPoolStatus"] | null;
                provider_type?: components["schemas"]["ProviderType"] | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkPool"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_work_pool_api_v1_workerpools_pools_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkPoolCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkPool"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_work_pool_api_v1_workerpools_pools__pool_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pool_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkPoolWithRelations"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_work_pool_api_v1_workerpools_pools__pool_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pool_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkPoolCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkPool"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_work_pool_api_v1_workerpools_pools__pool_id__delete: {
        parameters: {
            query?: {
                force?: boolean;
            };
            header?: never;
            path: {
                pool_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_workers_api_v1_workerpools_workers_get: {
        parameters: {
            query?: {
                work_pool_id?: string | null;
                status?: components["schemas"]["WorkerStatus"] | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Worker"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_worker_api_v1_workerpools_workers_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkerCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Worker"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_worker_api_v1_workerpools_workers__worker_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkerWithSessions"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_worker_api_v1_workerpools_workers__worker_id__delete: {
        parameters: {
            query?: {
                force?: boolean;
            };
            header?: never;
            path: {
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_worker_heartbeat_api_v1_workerpools_workers__worker_id__heartbeat_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkerHeartbeat"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Worker"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    claim_pending_session_api_v1_workerpools_workers__worker_id__claim_session_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_worker_metrics_api_v1_workerpools_metrics_workers__worker_id__get: {
        parameters: {
            query?: {
                start_time?: string | null;
                end_time?: string | null;
                interval?: string | null;
            };
            header?: never;
            path: {
                worker_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workpool_metrics_api_v1_workerpools_metrics_workpool__work_pool_id__get: {
        parameters: {
            query?: {
                start_time?: string | null;
                end_time?: string | null;
                interval?: string;
                include_worker_breakdown?: boolean;
            };
            header?: never;
            path: {
                work_pool_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_system_metrics_overview_api_v1_workerpools_metrics_system_overview_get: {
        parameters: {
            query?: {
                start_time?: string | null;
                end_time?: string | null;
                interval?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
