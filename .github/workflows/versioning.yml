name: Semantic Versioning

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - main

jobs:
  validate-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check for semantic version labels
        run: |
          LABELS=$(echo '${{ toJSON(github.event.pull_request.labels) }}' | jq -r '.[].name')
          if echo "$LABELS" | grep -qE 'major|minor|patch'; then
            echo "PR has a valid semantic version label"
            exit 0
          else
            echo "Error: PR must have either 'major', 'minor', or 'patch' label"
            exit 1
          fi

  version:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install toml

      - name: Determine next version
        id: semver
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Current version: $LATEST_TAG"
          
          # Parse the version components
          IFS='.' read -r prefix encoded_minor patch <<< "$LATEST_TAG"
          
          # Extract major and minor from encoded minor position
          if [ "$encoded_minor" -ge 100 ]; then
            major=$((encoded_minor / 100))
            minor=$((encoded_minor % 100))
          else
            major=0
            minor=$encoded_minor
          fi
          
          echo "Parsed version - Major: $major, Minor: $minor, Patch: $patch"
          
          # Analyze commits since last tag
          COMMIT_MSGS=$(git log "$LATEST_TAG"..HEAD --pretty=format:"%s")
          
          # Check PR merge commits and look for labels
          if echo "$COMMIT_MSGS" | grep -q "major"; then
            # Bump major version
            major=$((major + 1))
            minor=1  # Reset minor to 1 when bumping major
            patch=0  # Reset patch
            new_encoded_minor=$((major * 100 + minor))
            NEXT_VERSION="0.$new_encoded_minor.0"
            echo "Bumping major version to: $NEXT_VERSION"
          elif echo "$COMMIT_MSGS" | grep -q "minor"; then
            # Bump minor version
            minor=$((minor + 1))
            patch=0  # Reset patch
            new_encoded_minor=$((major * 100 + minor))
            NEXT_VERSION="0.$new_encoded_minor.0"
            echo "Bumping minor version to: $NEXT_VERSION"
          else
            # Default to patch bump
            patch=$((patch + 1))
            new_encoded_minor=$((major * 100 + minor))
            NEXT_VERSION="0.$new_encoded_minor.$patch"
            echo "Bumping patch version to: $NEXT_VERSION"
          fi
          
          echo "Next version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in pyproject.toml
        run: |
          NEW_VERSION="${{ steps.semver.outputs.next_version }}"
          sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"$NEW_VERSION\"/" pyproject.toml

      - name: Create annotated git tag
        run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          git tag -a "v${{ steps.semver.outputs.next_version }}" -m "Release v${{ steps.semver.outputs.next_version }}"
          git push origin "v${{ steps.semver.outputs.next_version }}" 