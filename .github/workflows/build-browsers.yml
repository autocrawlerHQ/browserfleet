name: Build Browser Images

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - 'docker/browsers/**'
      - '.github/workflows/build-browsers.yml'

jobs:
  check-playwright-version:
    runs-on: ubuntu-latest
    outputs:
      playwright_version: ${{ steps.get-version.outputs.playwright_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Get latest Playwright version
        id: get-version
        run: |
          PLAYWRIGHT_VERSION=$(npm show playwright version)
          echo "playwright_version=${PLAYWRIGHT_VERSION}" >> $GITHUB_OUTPUT
          echo "Latest Playwright version: ${PLAYWRIGHT_VERSION}"

  build-browser-images:
    needs: check-playwright-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, chromium, firefox, webkit]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: autobrowser.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Get browser version
        id: get-browser-version
        run: |
          # Create temporary package.json
          echo '{"dependencies":{"playwright":"${{ needs.check-playwright-version.outputs.playwright_version }}"}}' > temp-package.json
          
          # Install playwright temporarily
          npm i --package-lock=false --no-package-lock --no-save playwright@${{ needs.check-playwright-version.outputs.playwright_version }}
          
          # Get browser version using a Node.js script
          BROWSER_VERSION=$(node -e "
            const { chromium, firefox, webkit } = require('playwright');
            
            async function getBrowserVersion() {
              const browserName = '${{ matrix.browser }}';
              let browser;
              let version;
              
              try {
                switch(browserName) {
                  case 'chrome':
                  case 'chromium':
                    browser = await chromium.launch();
                    break;
                  case 'firefox':
                    browser = await firefox.launch();
                    break;
                  case 'webkit':
                    browser = await webkit.launch();
                    break;
                }
                
                version = await browser.version();
                await browser.close();
                
                // Extract major.minor.patch version
                const versionMatch = version.match(/(\d+\.\d+\.\d+)/);
                if (versionMatch) {
                  console.log(versionMatch[1]);
                  return;
                }
                
                // Fallback: just print the full version
                console.log(version);
              } catch(e) {
                console.error(e);
                process.exit(1);
              }
            }
            
            getBrowserVersion();
          ")
          
          # Remove temporary files
          rm -f temp-package.json
          
          echo "browser_version=${BROWSER_VERSION}" >> $GITHUB_OUTPUT
          echo "${{ matrix.browser }} version: ${BROWSER_VERSION}"
          
          # Check if image with this tag already exists
          TAG_EXISTS=$(curl -s -u "${{ secrets.ACR_USERNAME }}:${{ secrets.ACR_PASSWORD }}" \
            "https://autobrowser.azurecr.io/v2/browsergrid/${{ matrix.browser }}/tags/list" | \
            grep -q "\"${BROWSER_VERSION}\"" && echo "true" || echo "false")
          
          echo "tag_exists=${TAG_EXISTS}" >> $GITHUB_OUTPUT

      - name: Build and push base image
        if: ${{ matrix.browser == 'chrome' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/browsers/base/Dockerfile
          push: true
          tags: |
            autobrowser.azurecr.io/browsergrid/base:latest

      - name: Build and push browser image
        if: ${{ steps.get-browser-version.outputs.tag_exists == 'false' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/browsers/${{ matrix.browser }}/Dockerfile
          build-args: |
            BROWSER_VERSION=${{ steps.get-browser-version.outputs.browser_version }}
            PLAYWRIGHT_VERSION=${{ needs.check-playwright-version.outputs.playwright_version }}
          push: true
          tags: |
            autobrowser.azurecr.io/browsergrid/${{ matrix.browser }}:${{ steps.get-browser-version.outputs.browser_version }}
            autobrowser.azurecr.io/browsergrid/${{ matrix.browser }}:latest

      - name: Update version manifest
        if: ${{ steps.get-browser-version.outputs.tag_exists == 'false' }}
        run: |
          echo "Updated ${{ matrix.browser }} to version ${{ steps.get-browser-version.outputs.browser_version }} with Playwright ${{ needs.check-playwright-version.outputs.playwright_version }}" >> browser_versions.txt
          
          # Additional logic to update a manifest file could be added here
          # This could be used to keep track of which browser versions are available
          
          echo "Successfully built and pushed browsergrid/${{ matrix.browser }}:${{ steps.get-browser-version.outputs.browser_version }}"